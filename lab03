.data
inbuf:	.space	64
outbuf: .asciz "%d\n"
Incounter: .long 0
Outcounter: .long 0
	.text
	.global	main
main:
	pushq	$0
   
	call 	inImage # camelcase inImage
    call    getInt
    call    outImage
inImage:
	leaq	Incounter,	%rbx
	movq	$0,%rbx
	movq	$inbuf, %rdi
	movq	$5, %rsi
	movq	stdin, %rdx
	call	fgets
getInt:
    	movq    $inbuf,%rdx
    	movq    $Incounter,%rax
	movq  (%rdx,%rax,1),%r10  # får error message. denna ska ta aktuell position för ordet.
	                            #Ex ifall ordet är hej och counter1 ska bokstaven vara e
	cmpq	$32, %r10
	je		continueloop
	cmpq	$43, %r10
	je		continueloop
	cmpq	$45, %r10
	je		continueloop
	call	checkifInt
checkifInt:
	cmpq	$48, %r10
	jle		checkifnumber
checkifnumber:
	cmpq	$57, %r10
	jle		continueloop
continueloop:
	movq	$outbuf,%r8
	movq	%rdi,(%r8,%rbx,8)
	incq	%r8 				# ökar och pushar (?) registret som pekar på counter för dessa två rader
	incq	%rbx
	call	checkifInt

getText:
	movq    $inbuf, %rdi  		# kopiera/flytta buf till rdi
	call    inImage     		# anropar inImage för att ta emot sträng och nollställa position i buf (counter)
	call    addText   			# subrutin för att lägga till text till format
addText:
	movq	(%rdi, %r8), %rdi
	pushq	%rdi	
	incq	%r8					# aktuell position
	cmpq	%r8, %r9			# jämför aktuell position med parameter 1
	je		endloop				# om lika, gå till endloop för avslut
	call	addText				# lägg till nästa tecken i buf


endloop:
	movq	(%rsi), %rbx		# flyttar aktuellt tal/tecken till format (rbx)
	popq    %rsi        		# popar rsi från stacken
	decq    %r9         		# minskar r9 med 1
	cmpq    $0,%r9      		# jämför med 0 (slut på antal tecken)
	jge     endloop	

getChar:
	movq    $inbuf, %rdi 		# flyttar buf till rdi
	cmpq	$0,%rdi				# Ifall ord saknas eller är i slutet är sista tecken \n.
	je		inImage
	movq	(%rdi,%r8),%rax 	# tar nuvarande bokstav
	incq	%r8					#  ökar med 1

getInPos:
	movq	$Incounter,%rax		# returnerar vad som står i counter

setInPos:
	cmpq	$0,%rdi				# kollar ifall det är mindre än noll
	jl		lessthanzero
	cmpq	$64,%rdi			# kollar ifall det är större än 64
	jg		largerthanzero
	movq	$Incounter, %rdi	# ändra värdet på counter
lessthanzero:
	movq	$0,%rdi 			# rdi blir 0
	call	setInPos
largerthanzero:
	movq	$64,%rdi			# rdi blir 64
	call 	setInPos
	
outImage:
    movq    $inbuf, %rdi
    movq    $5, %rsi
    movq    stdout,%rdx
    call    puts
    leaq	Outcounter,	%rbx
	movq	$0,%rbx

putInt:
    movq    $outbuf,%rdx
    movq    $Outcounter,%r8
    movq	(%rdx, %r8), %rdx
    cmpq	$0,%rdx				# Ifall ord saknas eller är i slutet är sista tecken \n.
	je		inImage
	movq	(%rdx,%r8),%rdi 	# tar nuvarande bokstav
	incq	%r8					#  ökar med 1
	
# fungerande putText för headMsg tsm med outImage, headMsg i %rdi.
# lägga till: lägg till from aktuell pos. i buf till utbuffert.
#
#outImage:
#    movq    %rsi,%rdi
#    call    puts
#    ret
#putText:
#    movq    $outbuf,%rsi
#    movq    %rdi, %rsi
#    ret

# ej fungerande rutin för putText
# var lägga inbuf för att samtidigt kunna skriva head-/endMsg? 
putText:
    movq    $outbuf,%rsi		# lägg outbuf i rsi
    movq    $Outcounter,%rax		# outcounter i %rax
    movzbq  (%rdi,%rax,1),%rsi          # rdi = buf/msg
    cmpq    $0, %rsi			# om tom eller nullterm, gå till outimage
    je      outImage
    call    putTextLoop			# loop för att lägga till inbuf from aktuell pos. till utbuf
    movq    %rax, %r8                   # spara aktuell position
    ret
putTextLoop:
    cmpq    $64, %rax			# jämför räknare med 64 (full)
    je      outImage
    movq    (%rdi,%rax,1),%rsi		# lägg aktuellt tecken i rsi (utbuff)
    incq    %rax			# öka räknare
    cmpq    $0, %rsi			# om null, skriv ut - annars, kör loop
    jge     putTextLoop
    ret

# samtliga nedan identiska med inbuffert-position, med namn för utbuffert istället
# vid ändring av syntax för inbuffert-funktioner, ändra här också
getOutPos:
    movq	$Outcounter,%rax		# returnerar vad som står i counter
    ret
setOutPos:
    cmpq	$0,%rdi				# kollar ifall det är mindre än noll
    jl		Outlessthanzero
    cmpq	$64,%rdi			# kollar ifall det Ã¤r större Ã¤n 64
    jg		Outlargerthanzero
    movq	$Outcounter, %rdi	# Ändra värdet på counter
Outlessthanzero:
    movq	$0,%rdi 			# rdi blir 0
    call	setOutPos
Outlargerthanzero:
    movq	$64,%rdi			# rdi blir 64
    call 	setOutPos
