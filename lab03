.data
inbuf:	.space	64
outbuf: .space	64			# outbuf ska också vara reserverat utrymme, nullterm. sker i in/outImage
Incounter: .long 0
Outcounter: .long 0
	.text
	.global	main
main:
	pushq	$0
   
	call 	inImage # camelcase inImage
    call    getInt
    call    outImage
inImage:
	leaq 	inbuf, %rdi
	movq	Incounter, %rax
	movq	$5, %rsi
	movq	stdin, %rdx
	call	fgets
	movq	$0, Incounter      	# nollställ Incounter
	ret
getInt:
	leaq	inbuf, %rdi  # gör r10 till inbufs nuvarande värde.
	movq    Incounter,%rax
    	movzbq  (%rdi,%rax,1), %r10
	cmpq	$32, %r10
	je		continueloop
	cmpq	$43, %r10
	je		continueloop
	cmpq	$45, %r10
	je		continueloop
	call	checkifInt
checkifInt:
	cmpq	$48, %r10	# Kollar ifall r10 är en siffra
	jge		checkifnumber	
	call     endloop
checkifnumber:
	cmpq	$57, %r10
	jle		continueloop
	call     endloop
continueloop:
	movq	$outbuf,%r8     # Lägger till nuvarande tal i outbuf.
	movq    $Outcounter,%rax
	movq	%r10,(%r8,%rax,8)
	incq	%rax            # ökar counter med ett
	call	checkifInt
endloop:
   	movq	$outbuf,%rax 
	
getText:
	movq    $inbuf, %rdi  		# kopiera/flytta buf till rdi
	call    inImage     		# anropar inImage för att ta emot sträng och nollställa position i buf (counter)
	call    addText   			# subrutin för att lägga till text till format
addText:
	movq	(%rdi, %r8), %rdi
	pushq	%rdi	
	incq	%r8					# aktuell position
	cmpq	%r8, %r9			# jämför aktuell position med parameter 1
	je		endloop				# om lika, gå till endloop för avslut
	call	addText				# lägg till nästa tecken i buf


  
getChar:
	movq    $inbuf, %rsi 		# flyttar buf till rdi
	movq	Incounter,%rdx		# returnerar vad som står i counter   
	cmpq    $64,%rax
	je     getgetChar
	movb    (%rdi,%rdx), %r10b# itererar rdi, r10b är nästa char (8 bit

getInPos:
	movq	Incounter,%rax		# flyttar incounter till rax, returnerar.
    	ret
setInPos:
	cmpq	$0,%rdi				# kollar ifall det är mindre än noll
	jl	lessthanzero
	cmpq	$64,%rdi			# kollar ifall det är större än 64
	jg	largerthanzero
	movq    %rdi, Outcounter
	ret
lessthanzero:
	movq	$0,%rdi 			# rdi blir 0
	ret
largerthanzero:
	movq	$64,%rdi			# rdi blir 64
	ret
	
outImage:
	leaq 	outbuf, %rdi
	movq	Outcounter, %rax
	movb	$0, (%rdi, %rax)    	# nullterminering av sträng
    	call    puts                	# anropar puts, rdi pekar på outbuf
	movq	$0, Outcounter      	# nollställ Outcounter
	ret
putInt:
	movq    $outbuf, %rsi
	movq	$0, %r9     		# r9 = index för textparameter
	movq    Outcounter, %rax    	# rax = index outcounter
outIntLoop:
	cmpq	$64, %rax
	jne     putIntLoop
	pushq	%rdi			# pushar rdi, rdi är input parameter med text
	pushq	%rax            	# rax = outcounter
	call    outImage
	popq 	%rax
	popq 	%rdi
putIntLoop:
	movb    (%rdi,%r9), %r10b       # itererar rdi, r10b är nästa char (8 bit)
	cmp	$0, %r10b               # compare, 0 = slut på nullterm. sträng
	je	putIntEnd
	movb 	%r10b, (%rsi, %rax)     # lägg char i utbuffert
	incq	%r9                     # öka index i text
	incq	%rax                    # öka index i utbuffert
	jne     outIntLoop
putIntEnd:
	movq 	%rax, Outcounter        # uppdatera outcounter
	ret

putText:
	movq    $outbuf, %rsi
	movq	$0, %r9     		# r9 = index för textparameter
	movq    Outcounter, %rax    	# rax = index outcounter
outBufLoop:
	cmpq	$64, %rax
	jne     putTextLoop
	pushq	%rdi			# pushar rdi, rdi är input parameter med text
	pushq	%rax            	# rax = outcounter
	call    outImage
	popq 	%rax
	popq 	%rdi
putTextLoop:
	movb    (%rdi,%r9), %r10b       # itererar rdi, r10b är nästa char (8 bit)
	cmp	$0, %r10b               # compare, 0 = slut på nullterm. sträng
	je	putTextEnd
	movb 	%r10b, (%rsi, %rax)     # lägg char i utbuffert
	incq	%r9                     # öka index i text
	incq	%rax                    # öka index i utbuffert
	jne     outBufLoop
putTextEnd:
	movq 	%rax, Outcounter        # uppdatera outcounter
	ret

getOutPos:
    movq	Outcounter,%rax		# returnerar vad som står i counter
    ret
setOutPos:
    cmpq	$0,%rdi				# kollar ifall det är mindre än noll
    jl		Outlessthanzero
    cmpq	$64,%rdi			# kollar ifall det Ã¤r större Ã¤n 64
    jg		Outlargerthanzero
    movq	%rdi, Outcounter	# Ändra värdet på counter
    ret
Outlessthanzero:
    movq	$0,%rdi 			# rdi blir 0
    ret
Outlargerthanzero:
    movq	$64,%rdi			# rdi blir 64
    ret


putChar:
	movq    $outbuf, %rsi
	movq    $0, %r9
	movq    Outcounter, %rax    	# rax = index outcounter
outBufLoop:
	cmpq	$64, %rax
	jne     putCharLoop
	pushq	%rdi			# pushar rdi, rdi är input parameter med text
	pushq	%rax            	# rax = outcounter
	call    outImage
	popq 	%rax
	popq 	%rdi
putCharLoop:
    	movb    (%rdi,%r9), %r10b
	cmp	$0, %r10b
	je	putCharEnd
	movb 	%r10b, (%rsi, %rax)     # lägg char i utbuffert
	incq	%rax                    # öka index i utbuffert
putCharEnd:
	movq 	%rax, Outcounter        # uppdatera outcounter
	ret
	
	
