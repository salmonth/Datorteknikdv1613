	.data
headMsg:	.asciz	"Start av testprogram. Skriv in 5 tal!"
endMsg:	.asciz	"Slut pa testprogram"
buf:	.space	64
sum:	.quad	0
count:	.quad	0
temp:	.quad	0
inbuf:	.space	64
outbuf: .space 64
Incounter: .quad 0
Outcounter: .quad 0

	.text
	.global	main
main:
	movq	$headMsg,%rdi
	call	putText
	call	outImage
	call	outImage
	call	inImage
	movq	$5,count
l1:
	call	getInt
	movq	%rax,temp
	cmpq	$0,%rax
	jge		l2
	call	getOutPos
	decq	%rax
	movq	%rax,%rdi
	call	setOutPos
l2:
	movq	temp,%rdx
	add	%rdx,sum
	movq	%rdx,%rdi
	call	putInt
	movq	$'+',%rdi
	call	putChar
	decq	count
	cmpq	$0,count
	jne	l1
	call	getOutPos
	decq	%rax
	movq	%rax,%rdi
	call	setOutPos
	movq	$'=',%rdi
	call	putChar
	movq	sum, %rdi
	call	putInt
	call	outImage
	movq	$12,%rsi
	movq	$buf,%rdi
	call	getText
	movq	$buf,%rdi
	call	putText
	movq	$125,%rdi
	call	putInt
	call	outImage
	movq	$endMsg,%rdi
	call	putText
	call	outImage
	popq	%rax
	ret


inImage:
	movq 	$inbuf, %rdi
	movq	$64, %rsi
	movq	stdin, %rdx
	call	fgets
	movq	$0, Incounter
	ret

    	
getInt:
	movq    $inbuf, %rdi
	movq    Incounter,%rax
	movq	$0, %r8		
	movq    $0, %rbx		
inbufloop:
	cmpq    $65, %rax
	jl     getIntLoop
	call    inImage
	movq	$inbuf, %rdi
getIntLoop:
	movb    (%rdi, %rax), %r10b
	cmp     $'', %r10b
	jne	checkBlank
	call	inImage
	movq	$inbuf, %rdi
checkBlank:
	movb    (%rdi, %rax), %r10b
	cmp     $' ', %r10b
	jne     checkNegative
	incq    %rax
	jmp	inbufloop
checkNegative:
	cmp     $'-', %r10b
	jne     checkPlus
	movq	$1, %r8
	incq    %rax
	jmp     getNumber
checkPlus:
	cmp     $'+', %r10b
	jne     getNumber
	movq	$0, %r8
	incq    %rax
getNumber:
	cmpq    $64, %rax
	jne     getNumberLoop
	call    inImage
	movq	$inbuf, %rbx
getNumberLoop:
	movb    (%rdi, %rax), %r10b
	cmp     $'9', %r10b
	jg      getIntEnd
	cmp     $'0', %r10b
	jl      getIntEnd
	movzbq	%r10b, %r10		
	subq	$'0', %r10		
	movq    %r10, %r12
	imulq	$10, %rbx		
	addq	%r12, %rbx		
nextNumber:
	incq    %rax
	jmp     getNumber
getIntEnd:
	cmpq	$1, %r8			
	jne	getIntReturn
	negq	%rbx
getIntReturn:
	movq	%rax, Incounter
	movq	%rbx, %rax		
	ret
getText:
	movq    %rdi, %rcx
	movq    $inbuf, %rdi
	movq    $Incounter, %rax
	movq    %rax, %r9
	movq    %rsi, %r8
	movq    $0, %r11
getCharRpt:
	xorq    %rax, %rax
	call    getChar
	cmpq    $'',%rax
	je      getTextEnd
	movb    %al,(%rcx, %r11)
	incq    %r11
	incq    %r9
	movq    %r9, Incounter
	cmpq    %r8, %r11
	jl      getCharRpt
getTextEnd:
	movq    %r11, %rax
	ret

getChar:
	movq    $inbuf, %rdi
	movq    $Incounter,%r9
getCharBufLoop:
	cmpq    $64, %r9
	jne     checkCharEmpty
	call    inImage
	movq    $inbuf, %rdi
	movq    $Incounter, %r9
checkCharEmpty:
	cmpq    $0, %rdi
	jne     returnChar
	call    inImage
	movq    $inbuf, %rdi
	movq    $Incounter, %r9
returnChar:
	movq    %rdi, %rdx
	movb    %dl, %r10b
	movzbq	%r10b, %r10
	incq    %r9
	movq    %r9, Incounter
	xorq    %rax, %rax
	movq    %r10, %rax
	ret

getInPos:
	movq	Incounter,%rax		# flyttar incounter till rax, returnerar.
    	ret

setInPos:
	cmpq	$0,%rdi				# kollar ifall det är mindre än noll
	jl	lessthanzero
	cmpq	$64,%rdi			# kollar ifall det är större än 64
	jg	largerthanzero
	movq    %rdi, Incounter			# bytte till Incounter från Outcounter
	ret
lessthanzero:
	movq	$0,%rdi 			# rdi blir 0
	movq    %rdi, Incounter
	ret
largerthanzero:
	movq	$64,%rdi			# rdi blir 64
	movq    %rdi, Incounter			# flyttar Maxpos till incounter
	ret

###
# rutiner för utmatning:
###

outImage:
	movq 	$outbuf, %rdi
	call    puts                	# anropar puts, rdi pekar på outbuf
	movq	$0, Outcounter      	# nollställ Outcounter
	mov    $outbuf, %edi    # Set destination address to inbuf
	mov    $64, %ecx       # Set loop counter to 64 (inbuf size)
	mov    $0, %al         # Set byte value to 0
	rep    stosb           # Clear the inbuf content
	ret

putInt:
	movq    %rdi, %rdx
	movq    $outbuf, %rsi
	movq    $0, %r8
	movq    $10, %r11
	xorq    %rax, %rax
	movq    %rdx, %rax
checkNegInt:
	cmpq	$0, %rdx
	jge	putIntLoop
	pushq	%rax
	call	getOutPos
	movb	$'-', (%rsi, %rax)
	incq	%rax
	movq	%rax, Outcounter
	popq	%rax
	negq	%rax
putIntLoop:
	xorq    %rdx, %rdx
	idivq   %r11
	addq    $48, %rdx
	pushq   %rdx
	subq    $48, %rdx
	incq    %r8
	cmpq    $0, %rax
	jg      putIntLoop
	call    getOutPos
outIntLoop:
	cmpq	$64, %rax
	jne     addToOutbuf
	pushq	%rdi
	pushq	%rax
	call    outImage
	popq 	%rax
	popq 	%rdi
addToOutbuf:
	popq    %rdx
	movb    %dl, %r10b
	movb 	%r10b, (%rsi, %rax)
	decq    %r8
	incq    %r9
	incq    %rax
	cmpq    $0,%r8
	je      putIntEnd
	jmp     outIntLoop
putIntEnd:
	movq 	%rax, Outcounter
	ret

putText:
	movq    $outbuf, %rsi
	call	getOutPos		# returvärde = %rax(aktuell position i utbuffert)
	movq	%rax, %r9		# kopierar aktuell position till %r9
outBufLoop:
	cmpq	$64, %rax
	jne     putTextLoop
	pushq	%rdi			# pushar rdi, rdi är input parameter med text/inbuffert
	pushq	%rax            	# rax = outcounter
	call    outImage
	popq 	%rax
	popq 	%rdi
putTextLoop:
	movb    (%rdi,%r9), %r10b       # itererar rdi, r10b är nästa char (8 bit)
	cmp	$0, %r10b               # compare, 0 = slut på nullterm. sträng
	je	putTextEnd
	movb 	%r10b, (%rsi, %rax)     # lägg char i utbuffert
	incq	%r9                     # öka index i text
	incq	%rax                    # öka index i utbuffert
	cmpq	$0, %rsi
	jne     outBufLoop
putTextEnd:
	movq 	%rax, Outcounter        # uppdatera outcounter
	ret

putChar:
	movq	$outbuf, %rsi
	movq	Outcounter,%rax
outCharLoop:
	cmpq	$64, %rax
	jne	putCharLoop
	pushq	%rdi
	pushq	%rax
	call	outImage
	popq	%rax
	popq	%rdi
putCharLoop:
	movq	Outcounter,%rax
	movq    %rax,%r9
	movq    %rdi,%rdx
	movb    %dl, %r10b
	movb	%r10b, (%rsi, %r9)
	incq	%r9
	movq    %r9,Outcounter
	ret
getOutPos:
    	movq	Outcounter,%rax		# returnerar vad som står i counter
    	ret

setOutPos:
    	cmpq	$0,%rdi				# kollar ifall det är mindre än noll
    	jl	Outlessthanzero
    	cmpq	$64,%rdi			# kollar ifall det Ã¤r större Ã¤n 64
    	jg	Outlargerthanzero
    	movq	%rdi, Outcounter	# Ändra värdet på counter
    	ret
Outlessthanzero:
    	movq	$0,%rdi 			# rdi blir 0
	movq	%rdi, Outcounter
    	ret
Outlargerthanzero:
    	movq	$64,%rdi			# rdi blir 64
	movq	%rdi, Outcounter
    	ret		
