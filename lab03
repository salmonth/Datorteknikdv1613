	.data
buf:	.space	64
format: .asciz "%d\n"
counter: .long 0
	.text
	.global	main
main:
	pushq	$0
	movq    $counter, %r8 # lagt counter i register r8 (förslag)
	movq	$format, %rbx
	call 	inImage # camelcase inImage
inImage:
	movq	$buf, %rdi
	movq	$5, %rsi
	movq	stdin, %rdx
	call	fgets
getInt:
	movq	$buf,%rdi
	pushq	%r8 # pushar ett register istället för label 'counter' 
	call	checkifInt
checkifInt:
	popq	%rsi
	movq	(%rdi,%rsi),%rdi # raderat dubbla kommatecken
	cmpq	$32, %rdi
	je		continueloop
	cmpq	$43, %rdi
	je		continueloop
	cmpq	$45, %rdi
	je		continueloop
	cmpq	$48, %rdi
	jle		checkifnumber
	movq	%r8, %r9	# kopiera antal tecken till register r9
	call 	endloop
checkifnumber:
	cmpq	$57, %rdi
	jle		continueloop
continueloop:
	pushq	%rdi
	incq	%r8 # ökar och pushar (?) registret som pekar på counter för dessa två rader
	pushq	%r8
	call	checkifInt
endloop:
	movq	(%rsi), %rbx	# flyttar aktuellt tal/tecken till format (rbx)
    	popq    %rsi        	# popar rsi från stacken
    	decq    %r9         	# minskar r9 med 1
    	cmpq    $0,%r9      	# jämför med 0 (slut på antal tecken)
    	jge     endLoop
getText:
	movq	$countText, %r9
	movq	%rsi, %r9		# rsi är antal tecken (parameter 1 i testprogram Mprov64.s)
    	movq    $buf, %rdi  	# kopiera/flytta buf till rdi
    	call    inImage     	# anropar inImage för att ta emot sträng och nollställa position i buf (counter)
    	call    addText   		# subrutin för att lägga till text till format
addText:
	movq	(%rdi, %r8), %rdi
	pushq	%rdi	
	incq	%r8				# aktuell position
	cmpq	%r8, %r9		# jämför aktuell position med parameter 1
	je		endloop			# om lika, gå till endloop för avslut
	call	addText			# lägg till nästa tecken i buf
