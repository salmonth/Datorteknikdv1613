	.data
counter:	.quad 0
GPIO:		.quad 0
	.text
	.global setup
	.global interrupt
.text
.global main
main:
    call interrupt
    call setup
        call interrupt
        call interrupt
        call interrupt
        call interrupt
        call interrupt
        call interrupt
        call interrupt
        call interrupt
        call interrupt
        call interrupt
        call interrupt
        call interrupt
        call interrupt
        call interrupt
        call interrupt
        call interrupt
        call interrupt
        call interrupt
        call interrupt
        call interrupt
        call interrupt
	ret

interrupt:
# count up the counter from 0 to 15 modulo 16
movq	counter, %rbx
incq	%rbx
andq	$0xf, %rbx
movq	%rbx, counter
cmpq	$0, %rbx
je		zero
cmpq	$1, %rbx
je		one
cmpq	$2, %rbx
je		two
cmpq	$3, %rbx
je		three
cmpq	$4, %rbx
je		four
cmpq	$5, %rbx
je		five
cmpq	$6, %rbx
je		six
cmpq	$7, %rbx
je		seven
cmpq	$8, %rbx
je		eight
cmpq	$9, %rbx
je		nine
cmpq	$10, %rbx
je		ten
cmpq	$11, %rbx
je		eleven
cmpq	$12, %rbx
je		twelve
cmpq	$13, %rbx
je		thirteen
cmpq	$14, %rbx
je		fourteen
cmpq	$15, %rbx
je		fifteen

zero:
call	turnoff_four
call	turnoff_three
call	turnoff_two
call 	turnoff_one
ret
one:
call	LightFour
ret
two:
call	turnoff_four
call 	LightThree
ret
three:
call	LightFour
call	LightThree
ret
four:
call	turnoff_four
call	turnoff_three
call	LightTwo
ret
five:
call	LightFour
call	LightTwo
ret
six:
call	turnoff_four
call	LightThree
call	LightTwo
ret
seven:
call	LightFour
call	LightThree
call	LightTwo
ret
eight:
call	turnoff_four
call	turnoff_three
call	turnoff_two
call	LightOne
ret
nine:
call	LightFour
call	LightOne
ret
ten:
call	turnoff_four
call	LightThree
call	LightOne
ret
eleven:
call	LightFour
call	LightThree
call	LightOne
ret
twelve:
call	turnoff_four
call	turnoff_three
call	LightTwo
call	LightOne
ret
thirteen:
call	LightFour
call	LightTwo
call	LightOne
ret
fourteen:
call	turnoff_four
call	LightThree
call	LightTwo
call	LightOne
ret
fifteen:
call	LightFour
call	LightThree
call	LightTwo
call	LightOne
ret

LightOne:
# set first GPIO pin to high level (LED on)
movq	GPIO, %r9
movq	$1, %rcx
subq	$1,	%rcx
imulq	$8, %rcx
movq	$0x3, %rbx
shlq	$4, %rbx
addq	$1, %rbx
shlq	%cl, %rbx
orq		%rbx, 3(%r9)
ret
LightTwo:
# set second GPIO pin to high level (LED on)
movq    GPIO, %r9            # Load GPIO memory address
movq    $2, %rcx         	# Load the GPIO number into %rcx
subq    $1, %rcx            # Adjust to 0-based indexing
imulq   $8, %rcx			# Multiply by 8
movq    $0x3, %rbx			# Set value 0x3
shlq    $4, %rbx			# Shift value 0x3 by 4 bits
addq    $1, %rbx			# Add 1 to the result
shlq    %cl, %rbx            # Shift left based on GPIO number
orq		%rbx, 3(%r9)			# Combine with the existing value
ret
LightThree:
# set third GPIO pin to high level (LED on)
movq    GPIO, %r9            # Load GPIO memory address
movq    $3, %rcx         	# Load the GPIO number into %rcx
subq    $1, %rcx             # Adjust to 0-based indexing
imulq   $8, %rcx             # Multiply by 8
movq    $0x3, %rbx           # Set value 0x3
shlq    $4, %rbx             # Shift value 0x3 by 4 bits
addq    $1, %rbx             # Add 1 to the result
shlq    %cl, %rbx            # Shift left based on GPIO number
orq		%rbx, 3(%r9)			# Combine with the existing value
ret
LightFour:
# set fourth GPIO pin to high level (LED on)
movq    GPIO, %r9            # Load GPIO memory address
movq    $4, %rcx			# Load the GPIO number into %rcx
subq    $1, %rcx             # Adjust to 0-based indexing
imulq   $8, %rcx             # Multiply by 8
movq    $0x3, %rbx           # Set value 0x3
shlq    $4, %rbx             # Shift value 0x3 by 4 bits
addq    $1, %rbx             # Add 1 to the result
shlq    %cl, %rbx            # Shift left based on GPIO number
orq		%rbx, 3(%r9)			# Combine with the existing value
ret

# turn off ights
turnoff_one:
movq	GPIO, %r9			# Load Gpio memory address
movq	$0xCF, %rax			# Set value 0xCF 
movq	$1, %rcx			# Move gpio_nr to rcx
subq	$1, %rcx			# Sub 1 from GPIO nr
imulq	$8, %rcx			# Multiply result by 8
shlq	%cl, %rax			# Shift left based on GPIO number
not     %rax				# Invert shift result
andq	%rax, 3(%r9)		# Combine with existing value (gpio_addr + 3)
ret
turnoff_two:
movq	GPIO, %r9
movq	$0xCF, %rax
movq	$2, %rcx
subq	$1, %rcx
imulq	$8, %rcx
shlq	%cl, %rax
not     %rax
andq	%rax, 3(%r9)
ret
turnoff_three:
movq	GPIO, %r9
movq	$0xCF, %rax
movq	$3, %rcx
subq	$1, %rcx
imulq	$8, %rcx
shlq	%cl, %rax
not     %rax
andq	%rax, 3(%r9)
ret
turnoff_four:
movq	GPIO, %r9
movq	$0xCF, %rax
movq	$4, %rcx
subq	$1, %rcx
imulq	$8, %rcx
shlq	%cl, %rax
not     %rax
andq	%rax, 3(%r9)
ret

setup:
# calculate and save the memory address of the GPIO
movq	$0x60, %rdi
shlq	$16, %rdi
movq    $0xFFFF,%rbx 
andq	$0x1000, %rbx
movq    $0x9E,%r9
not     %r9
andq    $0xFF,%r9
orq     %rdi,%rbx
orq     %rbx,%r9
addq	$0x1000, %r9		# Add twelve bits to get result 0x601061 => 0x602061
# movq	  $0x602061, %r9	# h√•rdkodad adress
movq	%r9, GPIO

# Set GPIO pins 1-4 as outputs (index 1-4)
movq	GPIO, %rdi
movq    $1,%rdx
output_loop:
movq	GPIO, %rdi
movq    $0x2, %rbx   		# Set output value
shlq    $6, %rbx     		# Shift to the correct position
movq    $4, %rcx     		# Number of GPIO pins to set
subq    %rdx, %rcx   		# Adjust for the current pin
imulq   $2, %rcx     		# Multiply by 2 (each pin is 2 bits)
shlq    %cl, %rbx    		# Shift to the correct position for the current pin
orq     %rbx, (%rdi)		# Set the output value for the current pin
incq    %rdx         		# Move to the next pin
cmpq    $4, %rdx     		# Check if all pins are set
jle     output_loop  		# Continue the loop if not

# Set GPIO pin 0 as an input (index 0)
setinput:
movq    $0, %rdx 			# GPIO_NR
movq	$0x3, %rbx
movq    %rdx, %rax
addq    %rax, %rdi
movq	$3, %rcx
subq    %rdx, %rcx
imulq   $2, %rcx
andq    $7, %rcx
addq    $8, %rcx
shlq	%cl, %rbx
orq     %rbx, (%rdi)
ret
